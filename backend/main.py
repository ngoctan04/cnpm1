from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from contextlib import asynccontextmanager
import uvicorn
from fastapi.staticfiles import StaticFiles
import os

from database import engine, get_db
from models import Base
from routers import users, hotels, rooms, bookings, payments


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Startup and shutdown events"""
    # Startup
    print("üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng Hotel Booking API...")
    
    # T·∫°o t·∫•t c·∫£ b·∫£ng trong database (auto-migration)
    print("üìä T·∫°o/c·∫≠p nh·∫≠t b·∫£ng database...")
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Database ƒë√£ s·∫µn s√†ng!")
    
    # T√πy ch·ªçn: Ch·∫°y seed data n·∫øu database tr·ªëng
    try:
        db = next(get_db())
        from models import User
        user_count = db.query(User).count()
        
        if user_count == 0:
            print("üå± Database tr·ªëng, ƒëang ch·∫°y seed data...")
            from seed_data import seed_database
            seed_database()
        else:
            print(f"üìã Database ƒë√£ c√≥ {user_count} ng∆∞·ªùi d√πng")
            
        db.close()
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra/seed data: {e}")
    
    print("‚úÖ Kh·ªüi ƒë·ªông ho√†n t·∫•t!")
    
    yield
    
    # Shutdown
    print("üõë ƒêang t·∫Øt ·ª©ng d·ª•ng...")


# T·∫°o FastAPI app v·ªõi metadata ti·∫øng Vi·ªát
app = FastAPI(
    title="üè® Hotel Booking API",
    description="""
    ## H·ªá th·ªëng ƒë·∫∑t ph√≤ng kh√°ch s·∫°n to√†n di·ªán

    API ho√†n ch·ªânh cho vi·ªác qu·∫£n l√Ω kh√°ch s·∫°n v√† ƒë·∫∑t ph√≤ng v·ªõi c√°c t√≠nh nƒÉng:

    ### üîê **X√°c th·ª±c & Ph√¢n quy·ªÅn**
    - ƒêƒÉng k√Ω, ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng
    - JWT token authentication  
    - Ph√¢n quy·ªÅn Admin/Guest

    ### üè® **Qu·∫£n l√Ω Kh√°ch s·∫°n**
    - CRUD kh√°ch s·∫°n
    - T√¨m ki·∫øm theo ƒë·ªãa ƒëi·ªÉm, ƒë√°nh gi√°
    - Qu·∫£n l√Ω ti·ªán nghi

    ### üõèÔ∏è **Qu·∫£n l√Ω Ph√≤ng**
    - CRUD ph√≤ng theo kh√°ch s·∫°n
    - Ki·ªÉm tra t√¨nh tr·∫°ng c√≤n tr·ªëng
    - L·ªçc theo lo·∫°i, gi√°, s·ª©c ch·ª©a
    - Qu·∫£n l√Ω b·∫£o tr√¨

    ### üìÖ **ƒê·∫∑t ph√≤ng**
    - T·∫°o, s·ª≠a, h·ªßy booking
    - Ki·ªÉm tra xung ƒë·ªôt l·ªãch tr√¨nh
    - T√≠nh to√°n gi√° t·ª± ƒë·ªông
    - Theo d√µi tr·∫°ng th√°i

    ### üí≥ **Thanh to√°n**
    - T·∫°o v√† x·ª≠ l√Ω thanh to√°n
    - H·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng th·ª©c
    - Theo d√µi tr·∫°ng th√°i thanh to√°n
    - B√°o c√°o doanh thu

    ### üìä **B√°o c√°o & Th·ªëng k√™**
    - Dashboard admin
    - Th·ªëng k√™ booking, doanh thu
    - B√°o c√°o theo kh√°ch s·∫°n

    ---

    **üîë T√†i kho·∫£n test:**
    - **Admin:** `admin` / `admin123`
    - **Guest:** `guest1` / `guest123`

    **üåê Base URL:** `/api/v1`
    """,
    version="1.0.0",
    contact={
        "name": "Hotel Booking Team",
        "email": "support@hotelbooking.com",
    },
    license_info={
        "name": "MIT",
    },
    lifespan=lifespan
)

# Mount static files for media
MEDIA_ROOT = os.getenv("MEDIA_ROOT", "media")
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Custom media endpoint with CORS headers
@app.get("/media/{file_path:path}")
async def serve_media(file_path: str):
    """Serve media files with CORS headers"""
    file_path = os.path.join(MEDIA_ROOT, file_path)
    if os.path.exists(file_path):
        return FileResponse(
            file_path,
            headers={
                "Access-Control-Allow-Origin": "http://localhost:3000",
                "Access-Control-Allow-Methods": "GET, OPTIONS",
                "Access-Control-Allow-Headers": "*",
                "Access-Control-Allow-Credentials": "true",
                "Cache-Control": "no-cache, no-store, must-revalidate",
                "Pragma": "no-cache",
                "Expires": "0"
            }
        )
    raise HTTPException(status_code=404, detail="File not found")

# Test endpoint for CORS
@app.get("/test-cors")
async def test_cors():
    """Test CORS endpoint"""
    return {"message": "CORS test successful"}

# Mount static files for backward compatibility
app.mount("/media", StaticFiles(directory=MEDIA_ROOT), name="media")

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:3001", 
        "http://127.0.0.1:3001"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"]
)

# Global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """X·ª≠ l√Ω l·ªói to√†n c·ª•c"""
    return JSONResponse(
        status_code=500,
        content={
            "code": 500,
            "message": "L·ªói h·ªá th·ªëng kh√¥ng x√°c ƒë·ªãnh",
            "detail": str(exc) if app.debug else "Li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£"
        }
    )

# Health check endpoint
@app.get("/", tags=["Health"])
async def root():
    """
    Health check endpoint - Ki·ªÉm tra t√¨nh tr·∫°ng API
    """
    return {
        "code": 200,
        "message": "üè® Hotel Booking API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!",
        "data": {
            "status": "healthy",
            "version": "1.0.0",
            "docs": "/docs",
            "endpoints": {
                "users": "/api/v1/users",
                "hotels": "/api/v1/hotels", 
                "rooms": "/api/v1/rooms",
                "bookings": "/api/v1/bookings",
                "payments": "/api/v1/payments"
            }
        }
    }

@app.get("/health", tags=["Health"])
async def health_check():
    """
    Endpoint ki·ªÉm tra s·ª©c kh·ªèe chi ti·∫øt
    """
    try:
        # Test database connection
        db = next(get_db())
        from models import User
        db.query(User).count()
        db.close()
        db_status = "connected"
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    return {
        "code": 200,
        "message": "Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng",
        "data": {
            "api": "healthy",
            "database": db_status,
            "timestamp": "2024-01-01T00:00:00Z"
        }
    }

# Include routers with Vietnamese prefixes
app.include_router(
    users.router, 
    prefix="/api/v1/users", 
    tags=["üë• Ng∆∞·ªùi d√πng"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y"},
        500: {"description": "L·ªói server"}
    }
)

# Backward compatibility endpoints (without /api/v1 prefix)
app.include_router(
    users.router, 
    prefix="/users", 
    tags=["üë• Ng∆∞·ªùi d√πng (Legacy)"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y"},
        500: {"description": "L·ªói server"}
    }
)

app.include_router(
    hotels.router, 
    prefix="/api/v1/hotels", 
    tags=["üè® Kh√°ch s·∫°n"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n"},
        500: {"description": "L·ªói server"}
    }
)

# Backward compatibility endpoints (without /api/v1 prefix)
app.include_router(
    hotels.router, 
    prefix="/hotels", 
    tags=["üè® Kh√°ch s·∫°n (Legacy)"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n"},
        500: {"description": "L·ªói server"}
    }
)

app.include_router(
    rooms.router, 
    prefix="/api/v1/rooms", 
    tags=["üõèÔ∏è Ph√≤ng"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y ph√≤ng"},
        500: {"description": "L·ªói server"}
    }
)

# Backward compatibility endpoints (without /api/v1 prefix)
app.include_router(
    rooms.router, 
    prefix="/rooms", 
    tags=["üõèÔ∏è Ph√≤ng (Legacy)"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y ph√≤ng"},
        500: {"description": "L·ªói server"}
    }
)

app.include_router(
    bookings.router, 
    prefix="/api/v1/bookings", 
    tags=["üìÖ ƒê·∫∑t ph√≤ng"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y booking"},
        500: {"description": "L·ªói server"}
    }
)

# Backward compatibility endpoints (without /api/v1 prefix)
app.include_router(
    bookings.router, 
    prefix="/bookings", 
    tags=["üìÖ ƒê·∫∑t ph√≤ng (Legacy)"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y booking"},
        500: {"description": "L·ªói server"}
    }
)

app.include_router(
    payments.router, 
    prefix="/api/v1/payments", 
    tags=["üí≥ Thanh to√°n"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y thanh to√°n"},
        500: {"description": "L·ªói server"}
    }
)

# Backward compatibility endpoints (without /api/v1 prefix)
app.include_router(
    payments.router, 
    prefix="/payments", 
    tags=["üí≥ Thanh to√°n (Legacy)"],
    responses={
        401: {"description": "Ch∆∞a x√°c th·ª±c"},
        403: {"description": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"},
        404: {"description": "Kh√¥ng t√¨m th·∫•y thanh to√°n"},
        500: {"description": "L·ªói server"}
    }
)

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 